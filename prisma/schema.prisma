generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  img       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  CartItem CartItem[]
  Order    Order[]

  Address Address[]
}

model Category {
  id        String   @id @default(cuid())
  title     String
  image     String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Product {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  description  String?
  priceReal    Float
  priceDisplay Float
  categoryId   String
  weight       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Category  Category       @relation(fields: [categoryId], references: [id])
  Images    ProductImage[]
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String   @unique
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product? @relation(fields: [productId], references: [id])
}

model Slide {
  id        String   @id @default(cuid())
  title     String
  image     String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brands {
  id        String   @id @default(cuid())
  title     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product @relation(fields: [productId], references: [id])
  User    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId], name: "productId_userId")
}

model Order {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  orderStatus    String
  totalAmount    Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isDropship     Boolean  @default(false)
  nameDropship   String?
  noTelpDropShip String?
  note           String?
  Address        Address  @relation(fields: [addressId], references: [id])
  addressId      String

  Voucher       Voucher? @relation(fields: [voucherId], references: [id])
  voucherId     String?
  expedition    String
  expeditionFee Float

  OrderItem OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderid   String
  productid String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order   Order   @relation(fields: [orderid], references: [id])
  Product Product @relation(fields: [productid], references: [id])
}

model Address {
  id          String @id @default(cuid())
  provinsiId  String
  kotaId      String
  kecamatanId String
  kelurahanId String
  kodePos     String
  provinsi    String
  kota        String
  kecamatan   String
  kelurahan   String
  detail      String
  name        String
  noTelp      String
  User        User   @relation(fields: [userId], references: [id])
  userId      String

  Order Order[]
}

model Voucher {
  id      String   @id @default(cuid())
  code    String   @unique
  dueDate DateTime
  amount  Float

  Order Order[]
}
